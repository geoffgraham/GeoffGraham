{
  "{\"sourceRoot\":\"/Users/geoff/Sites/Geoff/app/public/wp-content/themes/v02\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/geoff/Sites/Geoff/app/public/wp-content/themes/v02\",\"filename\":\"/Users/geoff/Sites/Geoff/app/public/wp-content/themes/v02/gulpfile.babel.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/geoff/Sites/Geoff/app/public/wp-content/themes/v02\",\"plugins\":[],\"presets\":[]}:7.7.4": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/geoff/Sites/Geoff/app/public/wp-content/themes/v02",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/geoff/Sites/Geoff/app/public/wp-content/themes/v02",
      "filename": "/Users/geoff/Sites/Geoff/app/public/wp-content/themes/v02/gulpfile.babel.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/geoff/Sites/Geoff/app/public/wp-content/themes/v02",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/geoff/Sites/Geoff/app/public/wp-content/themes/v02/gulpfile.babel.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/geoff/Sites/Geoff/app/public/wp-content/themes/v02/gulpfile.babel.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/geoff/Sites/Geoff/app/public/wp-content/themes/v02",
        "sourceFileName": "gulpfile.babel.js"
      }
    },
    "ast": null,
    "code": "import { src, dest, watch, series, parallel } from 'gulp';\nimport yargs from 'yargs';\nimport sass from 'gulp-sass';\nimport cleanCss from 'gulp-clean-css';\nimport postcss from 'gulp-postcss';\nimport sourcemaps from 'gulp-sourcemaps';\nimport autoprefixer from 'autoprefixer';\nimport webpack from 'webpack-stream';\nimport gulpif from 'gulp-if';\nimport imagemin from 'gulp-imagemin';\nimport browserSync from \"browser-sync\";\nconst PRODUCTION = yargs.argv.prod;\nconst server = browserSync.create();\nexport const serve = done => {\n  server.init({\n    proxy: \"http://geoff.dev\"\n  });\n  done();\n};\nexport const reload = done => {\n  server.reload();\n  done();\n};\nexport const styles = () => {\n  return src(['src/scss/style.scss']).pipe(sass().on('error', sass.logError)).pipe(postcss([autoprefixer])).pipe(cleanCss({\n    compatibility: 'ie11'\n  })).pipe(sourcemaps.write()).pipe(dest('dist/css')).pipe(server.stream());\n};\nexport const scripts = () => {\n  return src('src/js/scripts.js').pipe(webpack({\n    module: {\n      rules: [{\n        test: /\\.js$/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: []\n          }\n        }\n      }]\n    },\n    mode: PRODUCTION ? 'production' : 'development',\n    devtool: !PRODUCTION ? 'inline-source-map' : false,\n    output: {\n      filename: 'scripts.js'\n    }\n  })).pipe(dest('dist/js'));\n};\nexport const images = () => {\n  return src('src/img/**/*.{jpg,jpeg,png,svg,gif}').pipe(imagemin()).pipe(dest('dist/img'));\n};\nexport const copy = () => {\n  return src(['src/**/*', '!src/{images,js,scss}', '!src/{images,js,scss}/*']).pipe(dest('dist/'));\n};\nexport const watchForChanges = () => {\n  watch('src/scss/**/*.scss', series(styles, reload));\n  watch('src/images/**/*.{jpg,jpeg,png,svg,gif}', series(images, reload));\n  watch(['src/**/*', '!src/{images,js,scss}', '!src/{images,js,scss}/**/*'], series(copy, reload));\n  watch('src/js/**/*.js', series(scripts, reload));\n  watch(\"**/*.php\", reload);\n};\nexport const dev = series(parallel(styles, images, scripts, copy), serve, watchForChanges, reload);\nexport const build = done => {\n  series(parallel(styles, images, copy, scripts));\n  done();\n};\nexport default dev;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImd1bHBmaWxlLmJhYmVsLmpzIl0sIm5hbWVzIjpbInNyYyIsImRlc3QiLCJ3YXRjaCIsInNlcmllcyIsInBhcmFsbGVsIiwieWFyZ3MiLCJzYXNzIiwiY2xlYW5Dc3MiLCJwb3N0Y3NzIiwic291cmNlbWFwcyIsImF1dG9wcmVmaXhlciIsIndlYnBhY2siLCJndWxwaWYiLCJpbWFnZW1pbiIsImJyb3dzZXJTeW5jIiwiUFJPRFVDVElPTiIsImFyZ3YiLCJwcm9kIiwic2VydmVyIiwiY3JlYXRlIiwic2VydmUiLCJkb25lIiwiaW5pdCIsInByb3h5IiwicmVsb2FkIiwic3R5bGVzIiwicGlwZSIsIm9uIiwibG9nRXJyb3IiLCJjb21wYXRpYmlsaXR5Iiwid3JpdGUiLCJzdHJlYW0iLCJzY3JpcHRzIiwibW9kdWxlIiwicnVsZXMiLCJ0ZXN0IiwidXNlIiwibG9hZGVyIiwib3B0aW9ucyIsInByZXNldHMiLCJtb2RlIiwiZGV2dG9vbCIsIm91dHB1dCIsImZpbGVuYW1lIiwiaW1hZ2VzIiwiY29weSIsIndhdGNoRm9yQ2hhbmdlcyIsImRldiIsImJ1aWxkIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxHQUFULEVBQWNDLElBQWQsRUFBb0JDLEtBQXBCLEVBQTJCQyxNQUEzQixFQUFtQ0MsUUFBbkMsUUFBbUQsTUFBbkQ7QUFDQSxPQUFPQyxLQUFQLE1BQWtCLE9BQWxCO0FBQ0EsT0FBT0MsSUFBUCxNQUFpQixXQUFqQjtBQUNBLE9BQU9DLFFBQVAsTUFBcUIsZ0JBQXJCO0FBQ0EsT0FBT0MsT0FBUCxNQUFvQixjQUFwQjtBQUNBLE9BQU9DLFVBQVAsTUFBdUIsaUJBQXZCO0FBQ0EsT0FBT0MsWUFBUCxNQUF5QixjQUF6QjtBQUNBLE9BQU9DLE9BQVAsTUFBb0IsZ0JBQXBCO0FBQ0EsT0FBT0MsTUFBUCxNQUFtQixTQUFuQjtBQUNBLE9BQU9DLFFBQVAsTUFBcUIsZUFBckI7QUFDQSxPQUFPQyxXQUFQLE1BQXdCLGNBQXhCO0FBRUEsTUFBTUMsVUFBVSxHQUFHVixLQUFLLENBQUNXLElBQU4sQ0FBV0MsSUFBOUI7QUFDQSxNQUFNQyxNQUFNLEdBQUdKLFdBQVcsQ0FBQ0ssTUFBWixFQUFmO0FBQ0EsT0FBTyxNQUFNQyxLQUFLLEdBQUdDLElBQUksSUFBSTtBQUMzQkgsRUFBQUEsTUFBTSxDQUFDSSxJQUFQLENBQVk7QUFDVkMsSUFBQUEsS0FBSyxFQUFFO0FBREcsR0FBWjtBQUdBRixFQUFBQSxJQUFJO0FBQ0wsQ0FMTTtBQU1QLE9BQU8sTUFBTUcsTUFBTSxHQUFHSCxJQUFJLElBQUk7QUFDNUJILEVBQUFBLE1BQU0sQ0FBQ00sTUFBUDtBQUNBSCxFQUFBQSxJQUFJO0FBQ0wsQ0FITTtBQUtQLE9BQU8sTUFBTUksTUFBTSxHQUFHLE1BQU07QUFDMUIsU0FBT3pCLEdBQUcsQ0FBQyxDQUFDLHFCQUFELENBQUQsQ0FBSCxDQUNKMEIsSUFESSxDQUNDcEIsSUFBSSxHQUFHcUIsRUFBUCxDQUFVLE9BQVYsRUFBbUJyQixJQUFJLENBQUNzQixRQUF4QixDQURELEVBRUpGLElBRkksQ0FFQ2xCLE9BQU8sQ0FBQyxDQUFFRSxZQUFGLENBQUQsQ0FGUixFQUdKZ0IsSUFISSxDQUdDbkIsUUFBUSxDQUFDO0FBQUNzQixJQUFBQSxhQUFhLEVBQUM7QUFBZixHQUFELENBSFQsRUFJSkgsSUFKSSxDQUlDakIsVUFBVSxDQUFDcUIsS0FBWCxFQUpELEVBS0pKLElBTEksQ0FLQ3pCLElBQUksQ0FBQyxVQUFELENBTEwsRUFNSnlCLElBTkksQ0FNQ1IsTUFBTSxDQUFDYSxNQUFQLEVBTkQsQ0FBUDtBQU9ELENBUk07QUFVUCxPQUFPLE1BQU1DLE9BQU8sR0FBRyxNQUFNO0FBQzNCLFNBQU9oQyxHQUFHLENBQUMsbUJBQUQsQ0FBSCxDQUNOMEIsSUFETSxDQUNEZixPQUFPLENBQUM7QUFDWnNCLElBQUFBLE1BQU0sRUFBRTtBQUNOQyxNQUFBQSxLQUFLLEVBQUUsQ0FDTDtBQUNFQyxRQUFBQSxJQUFJLEVBQUUsT0FEUjtBQUVFQyxRQUFBQSxHQUFHLEVBQUU7QUFDSEMsVUFBQUEsTUFBTSxFQUFFLGNBREw7QUFFSEMsVUFBQUEsT0FBTyxFQUFFO0FBQ1BDLFlBQUFBLE9BQU8sRUFBRTtBQURGO0FBRk47QUFGUCxPQURLO0FBREQsS0FESTtBQWNaQyxJQUFBQSxJQUFJLEVBQUV6QixVQUFVLEdBQUcsWUFBSCxHQUFrQixhQWR0QjtBQWVaMEIsSUFBQUEsT0FBTyxFQUFFLENBQUMxQixVQUFELEdBQWMsbUJBQWQsR0FBb0MsS0FmakM7QUFnQloyQixJQUFBQSxNQUFNLEVBQUU7QUFDTkMsTUFBQUEsUUFBUSxFQUFFO0FBREo7QUFoQkksR0FBRCxDQUROLEVBcUJOakIsSUFyQk0sQ0FxQkR6QixJQUFJLENBQUMsU0FBRCxDQXJCSCxDQUFQO0FBc0JELENBdkJNO0FBeUJQLE9BQU8sTUFBTTJDLE1BQU0sR0FBRyxNQUFNO0FBQzFCLFNBQU81QyxHQUFHLENBQUMscUNBQUQsQ0FBSCxDQUNKMEIsSUFESSxDQUNDYixRQUFRLEVBRFQsRUFFSmEsSUFGSSxDQUVDekIsSUFBSSxDQUFDLFVBQUQsQ0FGTCxDQUFQO0FBR0QsQ0FKTTtBQU1QLE9BQU8sTUFBTTRDLElBQUksR0FBRyxNQUFNO0FBQ3hCLFNBQU83QyxHQUFHLENBQUMsQ0FBQyxVQUFELEVBQVksdUJBQVosRUFBb0MseUJBQXBDLENBQUQsQ0FBSCxDQUNKMEIsSUFESSxDQUNDekIsSUFBSSxDQUFDLE9BQUQsQ0FETCxDQUFQO0FBRUQsQ0FITTtBQUtQLE9BQU8sTUFBTTZDLGVBQWUsR0FBRyxNQUFNO0FBQ25DNUMsRUFBQUEsS0FBSyxDQUFDLG9CQUFELEVBQXVCQyxNQUFNLENBQUNzQixNQUFELEVBQVNELE1BQVQsQ0FBN0IsQ0FBTDtBQUNBdEIsRUFBQUEsS0FBSyxDQUFDLHdDQUFELEVBQTJDQyxNQUFNLENBQUN5QyxNQUFELEVBQVNwQixNQUFULENBQWpELENBQUw7QUFDQXRCLEVBQUFBLEtBQUssQ0FBQyxDQUFDLFVBQUQsRUFBWSx1QkFBWixFQUFvQyw0QkFBcEMsQ0FBRCxFQUFvRUMsTUFBTSxDQUFDMEMsSUFBRCxFQUFPckIsTUFBUCxDQUExRSxDQUFMO0FBQ0F0QixFQUFBQSxLQUFLLENBQUMsZ0JBQUQsRUFBbUJDLE1BQU0sQ0FBQzZCLE9BQUQsRUFBVVIsTUFBVixDQUF6QixDQUFMO0FBQ0F0QixFQUFBQSxLQUFLLENBQUMsVUFBRCxFQUFhc0IsTUFBYixDQUFMO0FBQ0QsQ0FOTTtBQVFQLE9BQU8sTUFBTXVCLEdBQUcsR0FBRzVDLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDcUIsTUFBRCxFQUFTbUIsTUFBVCxFQUFpQlosT0FBakIsRUFBMEJhLElBQTFCLENBQVQsRUFBMEN6QixLQUExQyxFQUFpRDBCLGVBQWpELEVBQWtFdEIsTUFBbEUsQ0FBbEI7QUFFUCxPQUFPLE1BQU13QixLQUFLLEdBQUczQixJQUFJLElBQUk7QUFDNUJsQixFQUFBQSxNQUFNLENBQUNDLFFBQVEsQ0FBQ3FCLE1BQUQsRUFBU21CLE1BQVQsRUFBaUJDLElBQWpCLEVBQXVCYixPQUF2QixDQUFULENBQU47QUFDQVgsRUFBQUEsSUFBSTtBQUNKLENBSE07QUFLUCxlQUFlMEIsR0FBZiIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZ2VvZmYvU2l0ZXMvR2VvZmYvYXBwL3B1YmxpYy93cC1jb250ZW50L3RoZW1lcy92MDIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzcmMsIGRlc3QsIHdhdGNoLCBzZXJpZXMsIHBhcmFsbGVsIH0gZnJvbSAnZ3VscCc7XG5pbXBvcnQgeWFyZ3MgZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHNhc3MgZnJvbSAnZ3VscC1zYXNzJztcbmltcG9ydCBjbGVhbkNzcyBmcm9tICdndWxwLWNsZWFuLWNzcyc7XG5pbXBvcnQgcG9zdGNzcyBmcm9tICdndWxwLXBvc3Rjc3MnO1xuaW1wb3J0IHNvdXJjZW1hcHMgZnJvbSAnZ3VscC1zb3VyY2VtYXBzJztcbmltcG9ydCBhdXRvcHJlZml4ZXIgZnJvbSAnYXV0b3ByZWZpeGVyJztcbmltcG9ydCB3ZWJwYWNrIGZyb20gJ3dlYnBhY2stc3RyZWFtJztcbmltcG9ydCBndWxwaWYgZnJvbSAnZ3VscC1pZic7XG5pbXBvcnQgaW1hZ2VtaW4gZnJvbSAnZ3VscC1pbWFnZW1pbic7XG5pbXBvcnQgYnJvd3NlclN5bmMgZnJvbSBcImJyb3dzZXItc3luY1wiO1xuXG5jb25zdCBQUk9EVUNUSU9OID0geWFyZ3MuYXJndi5wcm9kO1xuY29uc3Qgc2VydmVyID0gYnJvd3NlclN5bmMuY3JlYXRlKCk7XG5leHBvcnQgY29uc3Qgc2VydmUgPSBkb25lID0+IHtcbiAgc2VydmVyLmluaXQoe1xuICAgIHByb3h5OiBcImh0dHA6Ly9nZW9mZi5kZXZcIlxuICB9KTtcbiAgZG9uZSgpO1xufTtcbmV4cG9ydCBjb25zdCByZWxvYWQgPSBkb25lID0+IHtcbiAgc2VydmVyLnJlbG9hZCgpO1xuICBkb25lKCk7XG59O1xuXG5leHBvcnQgY29uc3Qgc3R5bGVzID0gKCkgPT4ge1xuICByZXR1cm4gc3JjKFsnc3JjL3Njc3Mvc3R5bGUuc2NzcyddKVxuICAgIC5waXBlKHNhc3MoKS5vbignZXJyb3InLCBzYXNzLmxvZ0Vycm9yKSlcbiAgICAucGlwZShwb3N0Y3NzKFsgYXV0b3ByZWZpeGVyIF0pKVxuICAgIC5waXBlKGNsZWFuQ3NzKHtjb21wYXRpYmlsaXR5OidpZTExJ30pKVxuICAgIC5waXBlKHNvdXJjZW1hcHMud3JpdGUoKSlcbiAgICAucGlwZShkZXN0KCdkaXN0L2NzcycpKVxuICAgIC5waXBlKHNlcnZlci5zdHJlYW0oKSk7XG59XG5cbmV4cG9ydCBjb25zdCBzY3JpcHRzID0gKCkgPT4ge1xuICByZXR1cm4gc3JjKCdzcmMvanMvc2NyaXB0cy5qcycpXG4gIC5waXBlKHdlYnBhY2soe1xuICAgIG1vZHVsZToge1xuICAgICAgcnVsZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHRlc3Q6IC9cXC5qcyQvLFxuICAgICAgICAgIHVzZToge1xuICAgICAgICAgICAgbG9hZGVyOiAnYmFiZWwtbG9hZGVyJyxcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgcHJlc2V0czogW11cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIG1vZGU6IFBST0RVQ1RJT04gPyAncHJvZHVjdGlvbicgOiAnZGV2ZWxvcG1lbnQnLFxuICAgIGRldnRvb2w6ICFQUk9EVUNUSU9OID8gJ2lubGluZS1zb3VyY2UtbWFwJyA6IGZhbHNlLFxuICAgIG91dHB1dDoge1xuICAgICAgZmlsZW5hbWU6ICdzY3JpcHRzLmpzJ1xuICAgIH0sXG4gIH0pKVxuICAucGlwZShkZXN0KCdkaXN0L2pzJykpO1xufVxuXG5leHBvcnQgY29uc3QgaW1hZ2VzID0gKCkgPT4ge1xuICByZXR1cm4gc3JjKCdzcmMvaW1nLyoqLyoue2pwZyxqcGVnLHBuZyxzdmcsZ2lmfScpXG4gICAgLnBpcGUoaW1hZ2VtaW4oKSlcbiAgICAucGlwZShkZXN0KCdkaXN0L2ltZycpKTtcbn1cblxuZXhwb3J0IGNvbnN0IGNvcHkgPSAoKSA9PiB7XG4gIHJldHVybiBzcmMoWydzcmMvKiovKicsJyFzcmMve2ltYWdlcyxqcyxzY3NzfScsJyFzcmMve2ltYWdlcyxqcyxzY3NzfS8qJ10pXG4gICAgLnBpcGUoZGVzdCgnZGlzdC8nKSk7XG59XG5cbmV4cG9ydCBjb25zdCB3YXRjaEZvckNoYW5nZXMgPSAoKSA9PiB7XG4gIHdhdGNoKCdzcmMvc2Nzcy8qKi8qLnNjc3MnLCBzZXJpZXMoc3R5bGVzLCByZWxvYWQpKTtcbiAgd2F0Y2goJ3NyYy9pbWFnZXMvKiovKi57anBnLGpwZWcscG5nLHN2ZyxnaWZ9Jywgc2VyaWVzKGltYWdlcywgcmVsb2FkKSk7XG4gIHdhdGNoKFsnc3JjLyoqLyonLCchc3JjL3tpbWFnZXMsanMsc2Nzc30nLCchc3JjL3tpbWFnZXMsanMsc2Nzc30vKiovKiddLCBzZXJpZXMoY29weSwgcmVsb2FkKSk7XG4gIHdhdGNoKCdzcmMvanMvKiovKi5qcycsIHNlcmllcyhzY3JpcHRzLCByZWxvYWQpKTtcbiAgd2F0Y2goXCIqKi8qLnBocFwiLCByZWxvYWQpO1xufVxuXG5leHBvcnQgY29uc3QgZGV2ID0gc2VyaWVzKHBhcmFsbGVsKHN0eWxlcywgaW1hZ2VzLCBzY3JpcHRzLCBjb3B5KSwgc2VydmUsIHdhdGNoRm9yQ2hhbmdlcywgcmVsb2FkKTtcblxuZXhwb3J0IGNvbnN0IGJ1aWxkID0gZG9uZSA9PiB7XG5cdHNlcmllcyhwYXJhbGxlbChzdHlsZXMsIGltYWdlcywgY29weSwgc2NyaXB0cykpO1xuXHRkb25lKCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBkZXY7Il19",
    "map": {
      "version": 3,
      "sources": [
        "gulpfile.babel.js"
      ],
      "names": [
        "src",
        "dest",
        "watch",
        "series",
        "parallel",
        "yargs",
        "sass",
        "cleanCss",
        "postcss",
        "sourcemaps",
        "autoprefixer",
        "webpack",
        "gulpif",
        "imagemin",
        "browserSync",
        "PRODUCTION",
        "argv",
        "prod",
        "server",
        "create",
        "serve",
        "done",
        "init",
        "proxy",
        "reload",
        "styles",
        "pipe",
        "on",
        "logError",
        "compatibility",
        "write",
        "stream",
        "scripts",
        "module",
        "rules",
        "test",
        "use",
        "loader",
        "options",
        "presets",
        "mode",
        "devtool",
        "output",
        "filename",
        "images",
        "copy",
        "watchForChanges",
        "dev",
        "build"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/geoff/Sites/Geoff/app/public/wp-content/themes/v02",
      "sourcesContent": [
        "import { src, dest, watch, series, parallel } from 'gulp';\nimport yargs from 'yargs';\nimport sass from 'gulp-sass';\nimport cleanCss from 'gulp-clean-css';\nimport postcss from 'gulp-postcss';\nimport sourcemaps from 'gulp-sourcemaps';\nimport autoprefixer from 'autoprefixer';\nimport webpack from 'webpack-stream';\nimport gulpif from 'gulp-if';\nimport imagemin from 'gulp-imagemin';\nimport browserSync from \"browser-sync\";\n\nconst PRODUCTION = yargs.argv.prod;\nconst server = browserSync.create();\nexport const serve = done => {\n  server.init({\n    proxy: \"http://geoff.dev\"\n  });\n  done();\n};\nexport const reload = done => {\n  server.reload();\n  done();\n};\n\nexport const styles = () => {\n  return src(['src/scss/style.scss'])\n    .pipe(sass().on('error', sass.logError))\n    .pipe(postcss([ autoprefixer ]))\n    .pipe(cleanCss({compatibility:'ie11'}))\n    .pipe(sourcemaps.write())\n    .pipe(dest('dist/css'))\n    .pipe(server.stream());\n}\n\nexport const scripts = () => {\n  return src('src/js/scripts.js')\n  .pipe(webpack({\n    module: {\n      rules: [\n        {\n          test: /\\.js$/,\n          use: {\n            loader: 'babel-loader',\n            options: {\n              presets: []\n            }\n          }\n        }\n      ]\n    },\n    mode: PRODUCTION ? 'production' : 'development',\n    devtool: !PRODUCTION ? 'inline-source-map' : false,\n    output: {\n      filename: 'scripts.js'\n    },\n  }))\n  .pipe(dest('dist/js'));\n}\n\nexport const images = () => {\n  return src('src/img/**/*.{jpg,jpeg,png,svg,gif}')\n    .pipe(imagemin())\n    .pipe(dest('dist/img'));\n}\n\nexport const copy = () => {\n  return src(['src/**/*','!src/{images,js,scss}','!src/{images,js,scss}/*'])\n    .pipe(dest('dist/'));\n}\n\nexport const watchForChanges = () => {\n  watch('src/scss/**/*.scss', series(styles, reload));\n  watch('src/images/**/*.{jpg,jpeg,png,svg,gif}', series(images, reload));\n  watch(['src/**/*','!src/{images,js,scss}','!src/{images,js,scss}/**/*'], series(copy, reload));\n  watch('src/js/**/*.js', series(scripts, reload));\n  watch(\"**/*.php\", reload);\n}\n\nexport const dev = series(parallel(styles, images, scripts, copy), serve, watchForChanges, reload);\n\nexport const build = done => {\n\tseries(parallel(styles, images, copy, scripts));\n\tdone();\n};\n\nexport default dev;"
      ]
    },
    "sourceType": "module",
    "mtime": 1577811680057
  }
}